name: Release Build

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build release for'
        required: true
        type: string

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: elchinoo/stormdb

jobs:
  build-binaries:
    name: Build Cross-Platform Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: linux
            goarch: 386
            platform: linux-386
          # macOS builds
          - goos: darwin
            goarch: amd64
            platform: darwin-amd64
          - goos: darwin
            goarch: arm64
            platform: darwin-arm64
          # Windows builds
          - goos: windows
            goarch: amd64
            platform: windows-amd64
            ext: .exe
          - goos: windows
            goarch: 386
            platform: windows-386
            ext: .exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib gcc-mingw-w64

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |
        # Set cross-compilation environment
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          if [[ "${{ matrix.goarch }}" == "amd64" ]]; then
            export CC=x86_64-w64-mingw32-gcc
            export CXX=x86_64-w64-mingw32-g++
          else
            export CC=i686-w64-mingw32-gcc
            export CXX=i686-w64-mingw32-g++
          fi
        elif [[ "${{ matrix.goos }}" == "darwin" ]]; then
          # macOS cross-compilation (requires osxcross for full CGO support)
          export CGO_ENABLED=0  # Disable CGO for macOS builds for now
        fi
        
        # Create build directory
        mkdir -p build/release
        
        # Build main binary
        BINARY_NAME="stormdb${{ matrix.ext }}"
        go build -ldflags="-X main.version=${VERSION} -X main.commit=${GITHUB_SHA:0:8} -s -w" \
          -o "build/release/stormdb-${{ matrix.platform }}${BINARY_NAME##stormdb}" \
          ./cmd/stormdb

    - name: Build plugins (Linux only)
      if: matrix.goos == 'linux'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        # Build plugins for Linux only (CGO required)
        mkdir -p build/release/plugins-${{ matrix.platform }}
        
        # Build each plugin
        cd plugins
        for plugin_dir in */; do
          plugin_name=${plugin_dir%/}
          echo "Building plugin: $plugin_name"
          cd "$plugin_dir"
          go build -buildmode=plugin -ldflags="-s -w" \
            -o "../../build/release/plugins-${{ matrix.platform }}/${plugin_name}.so" \
            .
          cd ..
        done

    - name: Create tarball
      run: |
        cd build/release
        BINARY_NAME="stormdb-${{ matrix.platform }}"
        
        # Create directory structure
        mkdir -p "${BINARY_NAME}"
        cp "stormdb-${{ matrix.platform }}"* "${BINARY_NAME}/"
        
        # Add plugins if they exist
        if [[ -d "plugins-${{ matrix.platform }}" ]]; then
          cp -r "plugins-${{ matrix.platform }}" "${BINARY_NAME}/plugins"
        fi
        
        # Add documentation
        cp ../../README.md "${BINARY_NAME}/"
        cp ../../LICENSE "${BINARY_NAME}/" 2>/dev/null || echo "MIT License" > "${BINARY_NAME}/LICENSE"
        cp ../../CHANGELOG.md "${BINARY_NAME}/"
        
        # Add config examples
        cp -r ../../config "${BINARY_NAME}/"
        
        # Create tarball
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip -r "${BINARY_NAME}.zip" "${BINARY_NAME}"
        else
          tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}"
        fi
        
        # Calculate checksums
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          sha256sum "${BINARY_NAME}.zip" > "${BINARY_NAME}.zip.sha256"
        else
          sha256sum "${BINARY_NAME}.tar.gz" > "${BINARY_NAME}.tar.gz.sha256"
        fi

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.platform }}
        path: build/release/stormdb-${{ matrix.platform }}*
        retention-days: 7

  build-packages:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    needs: build-binaries
    strategy:
      matrix:
        include:
          - distro: ubuntu
            format: deb
            arch: amd64
          - distro: ubuntu
            format: deb
            arch: arm64
          - distro: debian
            format: deb
            arch: amd64
          - distro: centos
            format: rpm
            arch: x86_64
          - distro: fedora
            format: rpm
            arch: x86_64
          - distro: amazonlinux
            format: rpm
            arch: x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-linux-amd64
        path: build/

    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm
        sudo gem install --no-document fpm

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        # Remove 'v' prefix for packaging
        echo "VERSION=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "FULL_VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Create package structure
      run: |
        mkdir -p package/usr/local/bin
        mkdir -p package/usr/local/lib/stormdb/plugins
        mkdir -p package/etc/stormdb
        mkdir -p package/usr/share/doc/stormdb
        mkdir -p package/usr/share/man/man1
        
        # Copy binary
        cp build/stormdb-linux-amd64 package/usr/local/bin/stormdb
        chmod +x package/usr/local/bin/stormdb
        
        # Copy plugins if they exist
        if [[ -d build/plugins-linux-amd64 ]]; then
          cp build/plugins-linux-amd64/* package/usr/local/lib/stormdb/plugins/
        fi
        
        # Copy configuration examples
        cp -r config/* package/etc/stormdb/
        
        # Copy documentation
        cp README.md CHANGELOG.md package/usr/share/doc/stormdb/
        cp LICENSE package/usr/share/doc/stormdb/ 2>/dev/null || echo "MIT License" > package/usr/share/doc/stormdb/LICENSE

    - name: Create man page
      run: |
        mkdir -p package/usr/share/man/man1
        cat > package/usr/share/man/man1/stormdb.1 << 'EOF'
        .TH STORMDB 1 "$(date +'%B %Y')" "StormDB ${{ steps.version.outputs.VERSION }}" "User Commands"
        .SH NAME
        stormdb \- PostgreSQL performance testing and benchmarking tool
        .SH SYNOPSIS
        .B stormdb
        [\fI\,OPTIONS\/\fR] [\fI\,COMMAND\/\fR]
        .SH DESCRIPTION
        StormDB is a comprehensive PostgreSQL benchmarking and load testing tool designed to help you understand your database performance characteristics. It features a modern plugin architecture that provides multiple workload types, detailed metrics analysis, and advanced monitoring capabilities.
        .SH OPTIONS
        .TP
        \fB\-c\fR, \fB\-\-config\fR \fI\,FILE\/\fR
        Path to configuration file (default: config.yaml)
        .TP
        \fB\-\-setup\fR
        Setup database schema without running tests
        .TP
        \fB\-\-rebuild\fR
        Rebuild database schema and data
        .TP
        \fB\-\-help\fR
        Show help message
        .SH FILES
        .TP
        \fI\,/etc/stormdb/\fR
        System-wide configuration files
        .TP
        \fI\,/usr/local/lib/stormdb/plugins/\fR
        Plugin directory
        .SH SEE ALSO
        Full documentation available at: https://github.com/elchinoo/stormdb
        .SH AUTHOR
        StormDB Team
        EOF

    - name: Build DEB package
      if: matrix.format == 'deb'
      run: |
        fpm -s dir -t deb \
          --name stormdb \
          --version "${{ steps.version.outputs.VERSION }}" \
          --iteration 1 \
          --epoch 1 \
          --architecture ${{ matrix.arch }} \
          --maintainer "StormDB Team <support@example.com>" \
          --description "PostgreSQL performance testing and benchmarking tool" \
          --url "https://github.com/elchinoo/stormdb" \
          --license "MIT" \
          --vendor "StormDB Project" \
          --category "database" \
          --depends "postgresql-client" \
          --after-install scripts/postinstall.sh \
          --after-remove scripts/postremove.sh \
          --deb-compression xz \
          --deb-systemd scripts/stormdb.service \
          -C package \
          --package build/
        
        # Create checksums
        cd build
        sha256sum *.deb > stormdb_${{ steps.version.outputs.VERSION }}-1_${{ matrix.arch }}.deb.sha256

    - name: Build RPM package  
      if: matrix.format == 'rpm'
      run: |
        fpm -s dir -t rpm \
          --name stormdb \
          --version "${{ steps.version.outputs.VERSION }}" \
          --iteration 1 \
          --epoch 1 \
          --architecture ${{ matrix.arch }} \
          --maintainer "StormDB Team <support@example.com>" \
          --description "PostgreSQL performance testing and benchmarking tool" \
          --url "https://github.com/elchinoo/stormdb" \
          --license "MIT" \
          --vendor "StormDB Project" \
          --category "Applications/Databases" \
          --depends "postgresql" \
          --after-install scripts/postinstall.sh \
          --after-remove scripts/postremove.sh \
          --rpm-compression xz \
          -C package \
          --package build/
        
        # Create checksums
        cd build
        sha256sum *.rpm > stormdb-${{ steps.version.outputs.VERSION }}-1.${{ matrix.arch }}.rpm.sha256

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.distro }}-${{ matrix.format }}
        path: build/*.{deb,rpm,sha256}
        retention-days: 7

  build-docker:
    name: Build Multi-Platform Docker Images
    runs-on: ubuntu-latest
    needs: build-binaries

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "SHORT_VERSION=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          elchinoo/stormdb
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.SHORT_VERSION }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}
          COMMIT=${{ github.sha }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-packages, build-docker]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Organize release assets
      run: |
        mkdir -p release-assets
        
        # Copy binaries
        find artifacts/binaries-* -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | \
          xargs -I {} cp {} release-assets/
        
        # Copy packages  
        find artifacts/packages-* -name "*.deb" -o -name "*.rpm" -o -name "*.sha256" | \
          xargs -I {} cp {} release-assets/
        
        # List all assets
        echo "Release assets:"
        ls -la release-assets/

    - name: Get release notes
      id: release_notes
      run: |
        if [[ -f "GITHUB_RELEASE_DESCRIPTION.md" ]]; then
          echo "NOTES_FILE=GITHUB_RELEASE_DESCRIPTION.md" >> $GITHUB_OUTPUT
        else
          echo "NOTES_FILE=" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        body_path: ${{ steps.release_notes.outputs.NOTES_FILE }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
