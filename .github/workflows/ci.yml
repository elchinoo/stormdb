name: Release Pipeline

on:
  push:
    tags: [ 'v*' ]

permissions:
  contents: write    # For checking out code and creating releases
  packages: write    # For pushing Docker images to GHCR
  pull-requests: read

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: elchinoo/stormdb

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: storm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set Go environment paths
      run: |
        echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV
        echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

    - name: Wipe Go module cache
      run: |
        sudo rm -rf "${{ env.GOMODCACHE }}" || true
        sudo rm -rf "${{ env.GOCACHE }}" || true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Run security scan
      run: make security

    - name: Run vulnerability check
      run: make vuln-check

    - name: Run unit tests
      run: make test-unit

    - name: Run integration tests
      run: make test-integration
      env:
        PGSTORM_TEST_HOST: localhost
        PGSTORM_TEST_PORT: 5432
        PGSTORM_TEST_DB: storm_test
        PGSTORM_TEST_USER: postgres
        PGSTORM_TEST_PASSWORD: postgres

    - name: Generate test coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.out
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set Go environment paths
      run: |
        echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV
        echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

    - name: Wipe Go module cache
      run: |
        sudo rm -rf "${{ env.GOMODCACHE }}" || true
        sudo rm -rf "${{ env.GOCACHE }}" || true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      run: make build

    - name: Build plugins
      run: make plugins

    - name: Run benchmarks
      run: make benchmark

    - name: Build release artifacts
      if: startsWith(github.ref, 'refs/tags/')
      run: make release-build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pgstorm-binaries
        path: build/
        retention-days: 30

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  package-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: pgstorm-binaries
        path: build/

    - name: Install FPM for package creation
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential
        sudo gem install --no-document fpm

    - name: Extract version from tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Create DEB package
      run: |
        # List what we have in build directory for debugging
        find build/ -type f -ls
        
        # Create package structure
        mkdir -p package-deb/{usr/local/bin,usr/local/lib/stormdb/plugins,etc/stormdb,etc/systemd/system,var/lib/stormdb/config}
        
        # Copy binary - look for actual binary file
        if [ -f build/pgstorm ]; then
          cp build/pgstorm package-deb/usr/local/bin/stormdb
        elif [ -f build/stormdb ]; then
          cp build/stormdb package-deb/usr/local/bin/stormdb
        elif [ -f build/release/stormdb ]; then
          cp build/release/stormdb package-deb/usr/local/bin/stormdb
        else
          echo "Error: Could not find binary file"
          find build/ -name "*storm*" -type f
          exit 1
        fi
        chmod +x package-deb/usr/local/bin/stormdb
        
        # Copy plugins
        if [ -d build/plugins ]; then
          cp build/plugins/*.so package-deb/usr/local/lib/stormdb/plugins/ || true
        fi
        
        # Copy config files
        cp config/* package-deb/etc/stormdb/
        
        # Copy systemd service
        cp scripts/stormdb.service package-deb/etc/systemd/system/
        
        # Create DEB package
        fpm -s dir -t deb \
          -n stormdb \
          -v $VERSION \
          --description "StormDB - PostgreSQL Performance Testing Tool" \
          --url "https://github.com/elchinoo/stormdb" \
          --maintainer "StormDB Team <stormdb@example.com>" \
          --license "MIT" \
          --architecture amd64 \
          --depends postgresql-client \
          --after-install scripts/postinstall.sh \
          --after-remove scripts/postremove.sh \
          --deb-systemd scripts/stormdb.service \
          -C package-deb \
          .

    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: stormdb-deb-package
        path: "*.deb"
        retention-days: 30

  package-rpm:
    name: Build RPM Packages
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        os: [rocky, alma]
        
    container:
      image: ${{ matrix.os == 'rocky' && 'rockylinux:9' || 'almalinux:9' }}
    
    steps:
    - name: Install build dependencies
      run: |
        dnf update -y
        dnf install -y rpm-build rpmdevtools ruby ruby-devel gcc make
        gem install --no-document fpm

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: pgstorm-binaries
        path: build/

    - name: Extract version from tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Create RPM package
      run: |
        # List what we have in build directory for debugging
        find build/ -type f -ls
        
        # Create package structure
        mkdir -p package-rpm/{usr/local/bin,usr/local/lib/stormdb/plugins,etc/stormdb,etc/systemd/system,var/lib/stormdb/config}
        
        # Copy binary - look for actual binary file
        if [ -f build/pgstorm ]; then
          cp build/pgstorm package-rpm/usr/local/bin/stormdb
        elif [ -f build/stormdb ]; then
          cp build/stormdb package-rpm/usr/local/bin/stormdb
        elif [ -f build/release/stormdb ]; then
          cp build/release/stormdb package-rpm/usr/local/bin/stormdb
        else
          echo "Error: Could not find binary file"
          find build/ -name "*storm*" -type f
          exit 1
        fi
        chmod +x package-rpm/usr/local/bin/stormdb
        
        # Copy plugins
        if [ -d build/plugins ]; then
          cp build/plugins/*.so package-rpm/usr/local/lib/stormdb/plugins/ || true
        fi
        
        # Copy config files
        cp config/* package-rpm/etc/stormdb/
        
        # Copy systemd service
        cp scripts/stormdb.service package-rpm/etc/systemd/system/
        
        # Create RPM package
        fpm -s dir -t rpm \
          -n stormdb \
          -v $VERSION \
          --description "StormDB - PostgreSQL Performance Testing Tool" \
          --url "https://github.com/elchinoo/stormdb" \
          --maintainer "StormDB Team <stormdb@example.com>" \
          --license MIT \
          --architecture x86_64 \
          --depends postgresql \
          --after-install scripts/postinstall.sh \
          --after-remove scripts/postremove.sh \
          --rpm-init scripts/stormdb.service \
          -C package-rpm \
          .
        
        # Rename package to include OS identifier
        mv *.rpm stormdb-$VERSION-1.${{ matrix.os }}.x86_64.rpm

    - name: Upload RPM artifact
      uses: actions/upload-artifact@v4
      with:
        name: stormdb-rpm-${{ matrix.os }}-package
        path: "*.rpm"
        retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, docker, package-deb, package-rpm]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: pgstorm-binaries
        path: build/

    - name: Download DEB package
      uses: actions/download-artifact@v4
      with:
        name: stormdb-deb-package
        path: packages/

    - name: Download RPM packages
      uses: actions/download-artifact@v4
      with:
        pattern: stormdb-rpm-*-package
        path: packages/
        merge-multiple: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/release/*
          packages/*.deb
          packages/*.rpm
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
