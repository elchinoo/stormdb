# Progressive scaling configuration for TPCC workload
# This configuration demonstrates exponential connection scaling
# for finding optimal TPCC performance configuration

workload: "tpcc"
scale: 5       # Scale factor (number of warehouses)

# Regular benchmark settings (ignored in progressive mode)
duration: "2m"
workers: 20
connections: 20
summary_interval: "15s"

# Database configuration
database:
  type: "postgres"
  host: "localhost"
  port: 5432
  dbname: "test"
  username: "postgres"
  password: "password"
  sslmode: "disable"

# Progressive scaling configuration
progressive:
  enabled: true
  
  # Start small and scale exponentially to find saturation point
  min_workers: 5       # Start with 5 workers
  max_workers: 80      # Scale up to 80 workers
  step_workers: 5      # Used as minimum increment
  
  min_connections: 10  # Start with 10 connections
  max_connections: 100 # Scale up to 100 connections
  step_connections: 10 # Used as minimum increment
  
  # Shorter bands for quick scaling analysis
  band_duration: "20s" # Run each band for 45 seconds
  warmup_time: "10s"   # Longer warmup for TPCC
  cooldown_time: "10s" # Longer cooldown for stability
  
  # Use exponential scaling to quickly find performance limits
  strategy: "exponential"
  
  # Export detailed results for analysis
  export_format: "both"
  export_path: "./progressive_results/tpcc"

# Enable comprehensive PostgreSQL monitoring for TPCC
collect_pg_stats: true
pg_stats_statements: true
